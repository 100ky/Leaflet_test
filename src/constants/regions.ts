/**
 * Centralizovan√© definice region≈Ø ƒåesk√© republiky
 * Obsahuje v≈°echny geografick√© oblasti pou≈æ√≠van√© v aplikaci
 */

import { MapBounds } from '@/services/incineratorApi';

/**
 * Z√°kladn√≠ typ pro geografick√Ω region
 */
export interface BaseRegion {
    name: string;
    bounds: MapBounds;
}

/**
 * Region s API charakteristikami pro backend simulaci
 */
export interface ApiRegion extends BaseRegion {
    loadDelay: number; // specifick√© zpo≈ædƒõn√≠ pro region v ms
}

/**
 * Region s demo charakteristikami pro UI testov√°n√≠
 */
export interface DemoRegion extends BaseRegion {
    description: string;
    center: [number, number]; // [lat, lng]
    zoom: number;
    expectedLoadTime: string;
    dataAmount: string;
    icon: string;
}

/**
 * Z√°kladn√≠ regiony ƒåesk√© republiky pro API simulaci
 */
export const API_REGIONS: ApiRegion[] = [
    {
        name: 'Praha a okol√≠',
        bounds: { north: 50.2, south: 49.9, east: 14.8, west: 14.2 },
        loadDelay: 600
    },
    {
        name: 'Brno a okol√≠',
        bounds: { north: 49.3, south: 49.1, east: 16.8, west: 16.4 },
        loadDelay: 800
    },
    {
        name: 'Ostrava a okol√≠',
        bounds: { north: 49.9, south: 49.7, east: 18.5, west: 18.1 },
        loadDelay: 1000
    },
    {
        name: 'Severn√≠ ƒåechy',
        bounds: { north: 50.8, south: 50.3, east: 15.0, west: 13.5 },
        loadDelay: 900
    },
    {
        name: 'Ji≈æn√≠ ƒåechy',
        bounds: { north: 49.5, south: 48.5, east: 15.0, west: 13.5 },
        loadDelay: 700
    }
];

/**
 * Demo regiony pro UI testov√°n√≠ s roz≈°√≠≈ôen√Ωmi informacemi
 */
export const DEMO_REGIONS: DemoRegion[] = [
    {
        name: 'Praha a okol√≠',
        description: 'Nejv√≠ce spaloven, rychl√© naƒç√≠t√°n√≠',
        center: [50.0755, 14.4378],
        zoom: 11,
        bounds: { north: 50.2, south: 49.9, east: 14.8, west: 14.2 },
        expectedLoadTime: '600-800ms',
        dataAmount: 'Vysok√© (+50% v√≠ce dat)',
        icon: 'üèõÔ∏è'
    },
    {
        name: 'Brno a okol√≠',
        description: 'St≈ôednƒõ velk√© mƒõsto, pr≈Ømƒõrn√© naƒç√≠t√°n√≠',
        center: [49.1951, 16.6068],
        zoom: 11,
        bounds: { north: 49.3, south: 49.1, east: 16.8, west: 16.4 },
        expectedLoadTime: '800-1000ms',
        dataAmount: 'St≈ôedn√≠ (norm√°ln√≠ mno≈æstv√≠)',
        icon: 'üè≠'
    },
    {
        name: 'Ostrava a okol√≠',
        description: 'Pr≈Ømyslov√° oblast, pomalej≈°√≠ naƒç√≠t√°n√≠',
        center: [49.8209, 18.2625],
        zoom: 11,
        bounds: { north: 49.9, south: 49.7, east: 18.5, west: 18.1 },
        expectedLoadTime: '1000-1200ms',
        dataAmount: 'St≈ôedn√≠ (-20% m√©nƒõ dat)',
        icon: '‚ö°'
    },
    {
        name: 'Severn√≠ ƒåechy',
        description: 'Velkoplo≈°n√Ω region, v√≠ce spaloven',
        center: [50.6, 14.2],
        zoom: 9,
        bounds: { north: 50.8, south: 50.3, east: 15.0, west: 13.5 },
        expectedLoadTime: '900-1100ms',
        dataAmount: 'Vysok√© (+20% v√≠ce dat)',
        icon: 'üèîÔ∏è'
    },
    {
        name: 'Ji≈æn√≠ ƒåechy',
        description: 'Venkovsk√° oblast, m√©nƒõ dat',
        center: [49.0, 14.2],
        zoom: 9,
        bounds: { north: 49.5, south: 48.5, east: 15.0, west: 13.5 },
        expectedLoadTime: '700-900ms',
        dataAmount: 'N√≠zk√© (-40% m√©nƒõ dat)',
        icon: 'üåæ'
    },
    {
        name: 'Nezn√°m√° oblast',
        description: 'Oblast mimo hlavn√≠ regiony',
        center: [48.5, 17.0],
        zoom: 8,
        bounds: { north: 48.7, south: 48.3, east: 17.3, west: 16.7 },
        expectedLoadTime: '1200-1500ms',
        dataAmount: 'Velmi n√≠zk√© (minimum dat)',
        icon: '‚ùì'
    }
];

/**
 * Test regiony pro API testov√°n√≠
 */
export const TEST_REGIONS = [
    {
        name: 'Praha oblast',
        bounds: { north: 50.2, south: 49.9, east: 14.7, west: 14.2 },
        zoom: 11
    },
    {
        name: 'Brno oblast',
        bounds: { north: 49.3, south: 49.1, east: 16.8, west: 16.5 },
        zoom: 11
    },
    {
        name: 'Cel√° ƒåR',
        bounds: { north: 51.0, south: 48.5, east: 18.9, west: 12.1 },
        zoom: 7
    }
];

/**
 * Helper funkce pro pr√°ci s regiony
 */

/**
 * Najde region podle granic (pro API simulaci)
 */
export const getApiRegionForBounds = (bounds: MapBounds): ApiRegion | null => {
    for (const region of API_REGIONS) {
        // Zkontroluj p≈ôekryv s regionem
        const hasOverlap = !(
            bounds.north < region.bounds.south ||
            bounds.south > region.bounds.north ||
            bounds.east < region.bounds.west ||
            bounds.west > region.bounds.east
        );

        if (hasOverlap) {
            return region;
        }
    }
    return null; // Nezn√°m√Ω region
};

/**
 * Z√≠sk√° regionov√Ω multiplik√°tor pro mno≈æstv√≠ dat
 */
export const getRegionDataMultiplier = (regionName: string | null): number => {
    if (!regionName) return 0.3; // Mimo hlavn√≠ regiony - m√©nƒõ dat

    const regionMultiplier: Record<string, number> = {
        'Praha a okol√≠': 1.5,      // Praha m√° nejv√≠ce spaloven
        'Brno a okol√≠': 1.0,       // Brno pr≈Ømƒõrnƒõ
        'Ostrava a okol√≠': 0.8,    // Ostrava m√©nƒõ
        'Severn√≠ ƒåechy': 1.2,      // Severn√≠ ƒåechy v√≠ce (pr≈Ømysl)
        'Ji≈æn√≠ ƒåechy': 0.6         // Ji≈æn√≠ ƒåechy m√©nƒõ (venkov)
    };

    return regionMultiplier[regionName] || 1.0;
};

/**
 * Z√≠sk√° v≈°echna jm√©na region≈Ø
 */
export const getAllRegionNames = (): string[] => {
    return API_REGIONS.map(region => region.name);
};

/**
 * Najde demo region podle n√°zvu
 */
export const getDemoRegionByName = (name: string): DemoRegion | null => {
    return DEMO_REGIONS.find(region => region.name === name) || null;
};
