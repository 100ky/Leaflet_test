/**
 * Komponenta pro rychl√© testov√°n√≠ a porovn√°n√≠ API zdroj≈Ø
 */

'use client';

import { useState, Fragment } from 'react'; // P≈ôid√°n Fragment
import { fetchRemoteIncinerators, testRemoteApiConnection } from '@/services/remoteApi';
import { fetchIncineratorsWithCache } from '@/services/incineratorApi';
import { logger } from '@/utils/logger';
import { getApiSourceIcon, getApiSourceName } from '@/utils/statusHelpers';
import { Panel } from '../ui/Panel';
import { TestResultItem } from '../ui/TestResultItem';
import { InfoBlock } from '../ui/InfoBlock';

interface ApiComparisonResult {
    source: 'local' | 'remote';
    count: number;
    loadTime: number;
    success: boolean;
    error?: string;
    timestamp: Date;
}

export const QuickApiTestPanel: React.FC = () => {
    const [testing, setTesting] = useState(false);
    const [results, setResults] = useState<ApiComparisonResult[]>([]);
    const [connectionTestResult, setConnectionTestResult] = useState<{
        success: boolean;
        timestamp: Date;
    } | null>(null);

    const testBothApis = async () => {
        setTesting(true);
        setConnectionTestResult(null); // Reset connection test result
        const newResults: ApiComparisonResult[] = [];

        // Test lok√°ln√≠ho API
        try {
            const localStart = Date.now();
            const localResponse = await fetchIncineratorsWithCache({
                bounds: { north: 51, south: 48, east: 19, west: 12 },
                zoom: 7,
                clustered: false
            });
            const localTime = Date.now() - localStart;

            newResults.push({
                source: 'local',
                count: localResponse.incinerators.length,
                loadTime: localTime,
                success: true,
                timestamp: new Date()
            });
        } catch (error) {
            newResults.push({
                source: 'local',
                count: 0,
                loadTime: 0,
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                timestamp: new Date()
            });
        }

        // Test vzd√°len√©ho API
        try {
            const remoteStart = Date.now();
            const remoteData = await fetchRemoteIncinerators();
            const remoteTime = Date.now() - remoteStart;

            newResults.push({
                source: 'remote',
                count: remoteData.length,
                loadTime: remoteTime,
                success: true,
                timestamp: new Date()
            });
        } catch (error) {
            newResults.push({
                source: 'remote',
                count: 0,
                loadTime: 0,
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                timestamp: new Date()
            });
        }

        setResults(newResults);
        setTesting(false);
    };

    const testConnectionOnly = async () => {
        setTesting(true);
        setResults([]); // Reset API comparison results
        try {
            const success = await testRemoteApiConnection();
            logger.api(`Connection test result: ${success}`);
            setConnectionTestResult({ success, timestamp: new Date() });
        } catch (error) {
            logger.error('Connection test failed:', error);
            setConnectionTestResult({ success: false, timestamp: new Date() });
        } finally {
            setTesting(false);
        }
    };

    return (
        <Panel
            title={
                <>
                    ‚ö° <span className="responsive-inline">Rychl√© testov√°n√≠ API</span>
                    <span className="hidden-desktop">API Test</span>
                </>
            }
            isCollapsible={true}
            initiallyExpanded={false}
        >
            <div className="section-spacing">
                {/* Test buttons */}
                <div className="button-group">
                    <button
                        onClick={testBothApis}
                        disabled={testing}
                        className="btn-base btn-blue"
                    >
                        {testing && results.length > 0 ? 'üîÑ' : 'üöÄ'} {/* Zmƒõna ikony pokud testuje API */}
                        <span className="ml-1">
                            <span className="hidden sm:inline">
                                {testing && results.length > 0 ? 'Testuje API...' : 'Test obou API'}
                            </span>
                            <span className="sm:hidden">
                                {testing && results.length > 0 ? 'Test API...' : 'Test API'}
                            </span>
                        </span>
                    </button>
                    <button
                        onClick={testConnectionOnly}
                        disabled={testing}
                        className="btn-base btn-green"
                    >
                        {testing && connectionTestResult ? 'üîÑ' : 'üîó'} {/* Zmƒõna ikony pokud testuje p≈ôipojen√≠ */}
                        <span className="ml-1">
                            <span className="hidden sm:inline">
                                {testing && connectionTestResult ? 'Testuje p≈ôipojen√≠...' : 'Test p≈ôipojen√≠'}
                            </span>
                            <span className="sm:hidden">
                                {testing && connectionTestResult ? 'Testuje...' : 'P≈ôipojen√≠'}
                            </span>
                        </span>
                    </button>
                </div>

                {/* Connection Test Result */}
                {connectionTestResult && (
                    <TestResultItem
                        title="Test p≈ôipojen√≠ k vzd√°len√©mu API"
                        status={connectionTestResult.success ? 'success' : 'error'}
                        timestamp={connectionTestResult.timestamp}
                        details={connectionTestResult.success ? 'P≈ôipojen√≠ √∫spƒõ≈°n√©.' : 'P≈ôipojen√≠ selhalo.'}
                        className="my-4"
                    />
                )}

                {/* API Comparison Results */}
                {results.length > 0 && (
                    <div className="section-spacing-sm">
                        <h4 className="text-label text-gray-700 mb-2">
                            <span className="hidden-mobile">V√Ωsledky testu API:</span>
                            <span className="hidden-desktop">V√Ωsledky API:</span>
                        </h4>
                        <div className="space-y-3">
                            {results.map((result) => (
                                <TestResultItem
                                    key={result.source}
                                    title={getApiSourceName(result.source)}
                                    status={result.success ? 'success' : 'error'}
                                    timestamp={result.timestamp}
                                    icon={getApiSourceIcon(result.source)}
                                    details={
                                        result.success ? (
                                            <dl>
                                                <InfoBlock label="Poƒçet z√°znam≈Ø:" value={result.count} />
                                                <InfoBlock label="Rychlost naƒç√≠t√°n√≠:" value={`${result.loadTime}ms`} />
                                            </dl>
                                        ) : (
                                            <strong>Chyba: {result.error}</strong>
                                        )
                                    }
                                />
                            ))}
                        </div>
                    </div>
                )}

                {/* Comparison Summary */}
                {results.length === 2 && results.every(r => r.success) && (
                    <div className="info-box mt-4">
                        <h4 className="text-label font-medium text-blue-800 mb-2">Porovn√°n√≠ √∫spƒõ≈°n√Ωch test≈Ø:</h4>
                        <InfoBlock
                            label="Poƒçet dat (Lok√°ln√≠ vs Vzd√°len√©):"
                            value={`${results.find(r => r.source === 'local')?.count} vs ${results.find(r => r.source === 'remote')?.count}`}
                            className="text-responsive info-text"
                        />
                        <InfoBlock
                            label="Rychlost (Lok√°ln√≠ vs Vzd√°len√©):"
                            value={`${results.find(r => r.source === 'local')?.loadTime}ms vs ${results.find(r => r.source === 'remote')?.loadTime}ms`}
                            className="text-responsive info-text"
                        />
                    </div>
                )}

                {/* Info */}
                <div className="info-text hidden-mobile">
                    üí° <strong>Tip:</strong> Tento test naƒçte v≈°echna dostupn√° data z obou zdroj≈Ø pro porovn√°n√≠ rychlosti a poƒçtu z√°znam≈Ø.
                </div>
            </div>
        </Panel>
    );
};
